from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean, Text, Enum as SqlEnum
from sqlalchemy.orm import relationship
from app.database import Base
from enum import Enum
from datetime import datetime

class ChatType(str, Enum):
    general = "general"  # –û–±—â–∏–π —á–∞—Ç
    parents = "parents"  # –ß–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    athletes = "athletes"  # –ß–∞—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
    coaches = "coaches"  # –ß–∞—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    announcement = "announcement"  # –û–±—ä—è–≤–ª–µ–Ω–∏—è

class MessageType(str, Enum):
    text = "text"
    image = "image"
    file = "file"
    announcement = "announcement"

class ChatRoom(Base):
    """–ö–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞"""
    __tablename__ = "chat_rooms"

    id = Column(Integer, primary_key=True, index=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    name = Column(String, nullable=False)  # "–û–±—â–∏–π —á–∞—Ç", "–†–æ–¥–∏—Ç–µ–ª–∏ –≥—Ä—É–ø–ø—ã A"
    description = Column(Text, nullable=True)
    chat_type = Column(SqlEnum(ChatType), nullable=False)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = Column(Boolean, default=True)
    is_public = Column(Boolean, default=True)  # –ü—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    max_members = Column(Integer, nullable=True)  # –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    is_moderated = Column(Boolean, default=False)  # –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    created_by_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    created_by = relationship("User", foreign_keys=[created_by_id])
    messages = relationship("ChatMessage", back_populates="room", cascade="all, delete-orphan")
    members = relationship("ChatMembership", back_populates="room", cascade="all, delete-orphan")

class ChatMembership(Base):
    """–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞"""
    __tablename__ = "chat_memberships"

    id = Column(Integer, primary_key=True, index=True)
    room_id = Column(Integer, ForeignKey("chat_rooms.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # –†–æ–ª—å –≤ —á–∞—Ç–µ
    is_admin = Column(Boolean, default=False)
    is_moderator = Column(Boolean, default=False)
    can_post = Column(Boolean, default=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled = Column(Boolean, default=True)
    
    joined_at = Column(DateTime, default=datetime.utcnow)
    last_read_at = Column(DateTime, nullable=True)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ

    # Relationships
    room = relationship("ChatRoom", back_populates="members")
    user = relationship("User")

class ChatMessage(Base):
    """–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    __tablename__ = "chat_messages"

    id = Column(Integer, primary_key=True, index=True)
    room_id = Column(Integer, ForeignKey("chat_rooms.id"), nullable=False)
    sender_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    message_type = Column(SqlEnum(MessageType), default=MessageType.text)
    content = Column(Text, nullable=False)
    file_url = Column(String, nullable=True)  # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Ñ–∞–π–ª–æ–≤
    
    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply_to_id = Column(Integer, ForeignKey("chat_messages.id"), nullable=True)
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    is_edited = Column(Boolean, default=False)
    is_deleted = Column(Boolean, default=False)
    is_pinned = Column(Boolean, default=False)
    is_approved = Column(Boolean, default=True)  # –î–ª—è –º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    room = relationship("ChatRoom", back_populates="messages")
    sender = relationship("User", foreign_keys=[sender_id])
    reply_to = relationship("ChatMessage", remote_side=[id])
    reactions = relationship("MessageReaction", back_populates="message", cascade="all, delete-orphan")

class MessageReaction(Base):
    """–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    __tablename__ = "message_reactions"

    id = Column(Integer, primary_key=True, index=True)
    message_id = Column(Integer, ForeignKey("chat_messages.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    emoji = Column(String, nullable=False)  # "üëç", "‚ù§Ô∏è", "üòä"
    
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    message = relationship("ChatMessage", back_populates="reactions")
    user = relationship("User")

class ForumCategory(Base):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–æ—Ä—É–º–∞"""
    __tablename__ = "forum_categories"

    id = Column(Integer, primary_key=True, index=True)
    
    name = Column(String, nullable=False)  # "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "–¢—É—Ä–Ω–∏—Ä—ã"
    description = Column(Text, nullable=True)
    icon = Column(String, nullable=True)  # Emoji –∏–ª–∏ –∏–∫–æ–Ω–∫–∞
    color = Column(String, nullable=True)  # –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_active = Column(Boolean, default=True)
    sort_order = Column(Integer, default=0)
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    is_moderated = Column(Boolean, default=False)
    min_role_to_post = Column(String, default="athlete")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
    
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    topics = relationship("ForumTopic", back_populates="category", cascade="all, delete-orphan")

class ForumTopic(Base):
    """–¢–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞"""
    __tablename__ = "forum_topics"

    id = Column(Integer, primary_key=True, index=True)
    category_id = Column(Integer, ForeignKey("forum_categories.id"), nullable=False)
    created_by_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    title = Column(String, nullable=False)
    content = Column(Text, nullable=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    views_count = Column(Integer, default=0)
    replies_count = Column(Integer, default=0)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_pinned = Column(Boolean, default=False)
    is_locked = Column(Boolean, default=False)
    is_approved = Column(Boolean, default=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    last_reply_id = Column(Integer, ForeignKey("forum_replies.id"), nullable=True)
    last_reply_at = Column(DateTime, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    category = relationship("ForumCategory", back_populates="topics")
    created_by = relationship("User", foreign_keys=[created_by_id])
    replies = relationship("ForumReply", back_populates="topic", cascade="all, delete-orphan")
    last_reply = relationship("ForumReply", foreign_keys=[last_reply_id], post_update=True)

class ForumReply(Base):
    """–û—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä—É–º–µ"""
    __tablename__ = "forum_replies"

    id = Column(Integer, primary_key=True, index=True)
    topic_id = Column(Integer, ForeignKey("forum_topics.id"), nullable=False)
    author_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content = Column(Text, nullable=False)
    
    # –û—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç
    reply_to_id = Column(Integer, ForeignKey("forum_replies.id"), nullable=True)
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    is_edited = Column(Boolean, default=False)
    is_approved = Column(Boolean, default=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    topic = relationship("ForumTopic", back_populates="replies", foreign_keys=[topic_id])
    author = relationship("User", foreign_keys=[author_id])
    reply_to = relationship("ForumReply", remote_side=[id])
